{
	"name": "ckan_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ckan_extract",
						"type": "DatasetReference"
					},
					"name": "apidump"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ckan_transform",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          help as string,",
				"          success as boolean,",
				"          result as (count as integer, facets as ({} as string), results as (author as string, author_email as string, creator_user_id as string, id as string, isopen as boolean, license_id as string, license_title as string, maintainer as string, maintainer_email as string, metadata_created as string, metadata_modified as string, name as string, notes as string, num_resources as integer, num_tags as integer, organization as (id as string, name as string, title as string, type as string, description as string, image_url as string, created as string, is_organization as boolean, approval_status as string, state as string), owner_org as string, private as boolean, state as string, title as string, type as string, url as string, version as string, extras as (key as string, value as string)[], groups as (description as string, display_name as string, id as string, image_display_url as string, name as string, title as string)[], resources as (cache_last_updated as string, cache_url as string, created as string, datastore_active as boolean, description as string, format as string, hash as string, id as string, last_modified as string, metadata_modified as string, mimetype as string, mimetype_inner as string, name as string, package_id as string, position as integer, protocol as string, resource_type as string, size as string, state as string, url as string, url_type as string)[], tags as (display_name as string, id as string, name as string, state as string, vocabulary_id as string)[], relationships_as_subject as string[], relationships_as_object as string[])[], sort as string, search_facets as ({} as string))",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> apidump",
				"apidump foldDown(unroll(result.results, result.results),",
				"     mapColumn(",
				"          results = result.results",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 select(mapColumn(",
				"          id = results.id,",
				"          resources = results.resources",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select2 derive(wfs = find(resource_urls, regexMatch(#item, `^/spatialdata/.*/wfs[?]{1}.*$`)),",
				"          wms = find(resource_urls, regexMatch(#item, `^/spatialdata/.*/wms[?]{1}.*$`)),",
				"          ogc = find(resource_urls, regexMatch(#item, `^/spatialdata/.*ogc/features/v1.*$`))) ~> derivedColumn4",
				"select1 derive(resource_urls = split(dropLeft(toString(reduce(resources, '', #acc + ', ' + #item.url, #result)), 2), ',')) ~> derivedColumn5",
				"derivedColumn5 select(mapColumn(",
				"          id,",
				"          resource_urls",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"derivedColumn4 select(mapColumn(",
				"          id,",
				"          wfs,",
				"          wms,",
				"          ogc",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     filePattern:'ckan-out.csv',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}